#include<stdio.h>
#include<veda_device.h>
#include<time.h>

#define NOW() ({ struct timespec ts; clock_gettime(CLOCK_MONOTONIC, &ts); ts; })
#define TIME(start, end) ((double)(end.tv_sec - start.tv_sec) * 1000.0 + (double)(end.tv_nsec - start.tv_nsec) / 1000000.0)

#define VEDA(err) check(err, __FILE__, __LINE__)

void check(VEDAresult err, const char* file, const int line) {
	if(err != VEDA_SUCCESS) {
		const char *name, *str;
		vedaGetErrorName	(err, &name);
		vedaGetErrorString	(err, &str);
		printf("%s: %s @ %s:%i\n", name, str, file, line);
		exit(1);
	}
}


void swap_max(VEDAdeviceptr a,VEDAdeviceptr time_taken,int length){
    struct timespec start, end;
	start = NOW();

    double *array_a,*elapsed_time;
    int index=0;
    double tmp=array_a[index];
    
    VEDA(vedaMemPtr((void**)&array_a,a));
    VEDA(vedaMemPtr((void**)&elapsed_time,time_taken));

    for(int i=0;i<length;i++){
        if(tmp < array_a[i]){
            tmp = array_a[i];
            index = i;
        }
    }

    tmp = array_a[index];
    array_a[index] = array_a[length-1];
    array_a[length-1] = tmp;

    end = NOW();
	double elapsed = TIME(start, end);
    elapsed_time[0] = elapsed_time[0]+elapsed;
}
